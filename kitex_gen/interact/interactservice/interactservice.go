// Code generated by Kitex v0.12.3. DO NOT EDIT.

package interactservice

import (
	interact "TikTok-rpc/kitex_gen/interact"
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"Like": kitex.NewMethodInfo(
		likeHandler,
		newInteractServiceLikeArgs,
		newInteractServiceLikeResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"QueryLikeList": kitex.NewMethodInfo(
		queryLikeListHandler,
		newInteractServiceQueryLikeListArgs,
		newInteractServiceQueryLikeListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"CommentVideo": kitex.NewMethodInfo(
		commentVideoHandler,
		newInteractServiceCommentVideoArgs,
		newInteractServiceCommentVideoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"QueryCommentList": kitex.NewMethodInfo(
		queryCommentListHandler,
		newInteractServiceQueryCommentListArgs,
		newInteractServiceQueryCommentListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"DeleteComment": kitex.NewMethodInfo(
		deleteCommentHandler,
		newInteractServiceDeleteCommentArgs,
		newInteractServiceDeleteCommentResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	interactServiceServiceInfo                = NewServiceInfo()
	interactServiceServiceInfoForClient       = NewServiceInfoForClient()
	interactServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return interactServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return interactServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return interactServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "InteractService"
	handlerType := (*interact.InteractService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "interact",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.12.3",
		Extra:           extra,
	}
	return svcInfo
}

func likeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*interact.InteractServiceLikeArgs)
	realResult := result.(*interact.InteractServiceLikeResult)
	success, err := handler.(interact.InteractService).Like(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newInteractServiceLikeArgs() interface{} {
	return interact.NewInteractServiceLikeArgs()
}

func newInteractServiceLikeResult() interface{} {
	return interact.NewInteractServiceLikeResult()
}

func queryLikeListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*interact.InteractServiceQueryLikeListArgs)
	realResult := result.(*interact.InteractServiceQueryLikeListResult)
	success, err := handler.(interact.InteractService).QueryLikeList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newInteractServiceQueryLikeListArgs() interface{} {
	return interact.NewInteractServiceQueryLikeListArgs()
}

func newInteractServiceQueryLikeListResult() interface{} {
	return interact.NewInteractServiceQueryLikeListResult()
}

func commentVideoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*interact.InteractServiceCommentVideoArgs)
	realResult := result.(*interact.InteractServiceCommentVideoResult)
	success, err := handler.(interact.InteractService).CommentVideo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newInteractServiceCommentVideoArgs() interface{} {
	return interact.NewInteractServiceCommentVideoArgs()
}

func newInteractServiceCommentVideoResult() interface{} {
	return interact.NewInteractServiceCommentVideoResult()
}

func queryCommentListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*interact.InteractServiceQueryCommentListArgs)
	realResult := result.(*interact.InteractServiceQueryCommentListResult)
	success, err := handler.(interact.InteractService).QueryCommentList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newInteractServiceQueryCommentListArgs() interface{} {
	return interact.NewInteractServiceQueryCommentListArgs()
}

func newInteractServiceQueryCommentListResult() interface{} {
	return interact.NewInteractServiceQueryCommentListResult()
}

func deleteCommentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*interact.InteractServiceDeleteCommentArgs)
	realResult := result.(*interact.InteractServiceDeleteCommentResult)
	success, err := handler.(interact.InteractService).DeleteComment(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newInteractServiceDeleteCommentArgs() interface{} {
	return interact.NewInteractServiceDeleteCommentArgs()
}

func newInteractServiceDeleteCommentResult() interface{} {
	return interact.NewInteractServiceDeleteCommentResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Like(ctx context.Context, req *interact.LikeRequest) (r *interact.LikeResponse, err error) {
	var _args interact.InteractServiceLikeArgs
	_args.Req = req
	var _result interact.InteractServiceLikeResult
	if err = p.c.Call(ctx, "Like", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) QueryLikeList(ctx context.Context, req *interact.QueryLikeListRequest) (r *interact.QueryLikeListResponse, err error) {
	var _args interact.InteractServiceQueryLikeListArgs
	_args.Req = req
	var _result interact.InteractServiceQueryLikeListResult
	if err = p.c.Call(ctx, "QueryLikeList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CommentVideo(ctx context.Context, req *interact.CommentRequest) (r *interact.CommentResponse, err error) {
	var _args interact.InteractServiceCommentVideoArgs
	_args.Req = req
	var _result interact.InteractServiceCommentVideoResult
	if err = p.c.Call(ctx, "CommentVideo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) QueryCommentList(ctx context.Context, req *interact.QueryCommentListRequest) (r *interact.QueryCommentListResponse, err error) {
	var _args interact.InteractServiceQueryCommentListArgs
	_args.Req = req
	var _result interact.InteractServiceQueryCommentListResult
	if err = p.c.Call(ctx, "QueryCommentList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteComment(ctx context.Context, req *interact.DeleteCommentRequest) (r *interact.DeleteCommentResponse, err error) {
	var _args interact.InteractServiceDeleteCommentArgs
	_args.Req = req
	var _result interact.InteractServiceDeleteCommentResult
	if err = p.c.Call(ctx, "DeleteComment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
