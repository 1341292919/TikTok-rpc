// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	kafka "TikTok-rpc/pkg/kafka"
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "TikTok-rpc/app/interact/domain/model"
)

// MqPort is an autogenerated mock type for the MqPort type
type MqPort struct {
	mock.Mock
}

// ConsumeCommentMessage provides a mock function with given fields: ctx
func (_m *MqPort) ConsumeCommentMessage(ctx context.Context) <-chan *kafka.Message {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ConsumeCommentMessage")
	}

	var r0 <-chan *kafka.Message
	if rf, ok := ret.Get(0).(func(context.Context) <-chan *kafka.Message); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan *kafka.Message)
		}
	}

	return r0
}

// ConsumeLikeMessage provides a mock function with given fields: ctx
func (_m *MqPort) ConsumeLikeMessage(ctx context.Context) <-chan *kafka.Message {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ConsumeLikeMessage")
	}

	var r0 <-chan *kafka.Message
	if rf, ok := ret.Get(0).(func(context.Context) <-chan *kafka.Message); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan *kafka.Message)
		}
	}

	return r0
}

// SendCommentMessage provides a mock function with given fields: ctx, comment
func (_m *MqPort) SendCommentMessage(ctx context.Context, comment *model.CommentMessage) error {
	ret := _m.Called(ctx, comment)

	if len(ret) == 0 {
		panic("no return value specified for SendCommentMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.CommentMessage) error); ok {
		r0 = rf(ctx, comment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendLikeMessage provides a mock function with given fields: ctx, like
func (_m *MqPort) SendLikeMessage(ctx context.Context, like *model.UserLike) error {
	ret := _m.Called(ctx, like)

	if len(ret) == 0 {
		panic("no return value specified for SendLikeMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.UserLike) error); ok {
		r0 = rf(ctx, like)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMqPort creates a new instance of MqPort. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMqPort(t interface {
	mock.TestingT
	Cleanup(func())
}) *MqPort {
	mock := &MqPort{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
