// Code generated by hertz generator.

package user

import (
	"TikTok-rpc/app/gateway/middleware/jwt"
	api "TikTok-rpc/app/gateway/model/api/user"
	"TikTok-rpc/app/gateway/pack"
	"TikTok-rpc/app/gateway/rpc"
	"TikTok-rpc/app/gateway/service"
	"TikTok-rpc/kitex_gen/user"
	"TikTok-rpc/pkg/errno"
	"context"
	"github.com/cloudwego/hertz/pkg/app"
)

// Register .
// @router /user/register [POST]
func Register(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.RegisterRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.SendFailResponse(c, errno.NewErrNo(errno.ParamMissingErrorCode, "param missing:"+err.Error()))
		return
	}
	resp := new(api.RegisterResponse)
	err = rpc.RegisterRPC(ctx, &user.RegisterRequest{
		Username: req.Username,
		Password: req.Password,
	})
	if err != nil {
		pack.SendFailResponse(c, errno.ConvertErr(err))
		return
	}

	resp.Base = pack.BuildBaseResp(errno.Success)
	pack.SendResponse(c, resp)
}

// Login .
// @router /user/login [POST]
func Login(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.LoginRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.SendFailResponse(c, errno.NewErrNo(errno.ParamMissingErrorCode, "param missing:"+err.Error()))
		return
	}

	resp := new(api.LoginResponse)
	resp, err = rpc.LoginRPC(ctx, &user.LoginRequest{
		Username: req.Username,
		Password: req.Password,
		Code:     req.Code,
	})
	if err != nil {
		pack.SendFailResponse(c, errno.ConvertErr(err))
		return
	}

	jwt.AccessTokenJwtMiddleware.LoginHandler(ctx, c)
	jwt.RefreshTokenJwtMiddleware.LoginHandler(ctx, c)

	c.Header("Access-Token", c.GetString("Access-Token"))
	c.Header("Refresh-Token", c.GetString("Refresh-Token"))

	resp.Base = pack.BuildBaseResp(errno.Success)
	pack.SendResponse(c, resp)
}

// UploadAvatar .
// @router /user/avatar/upload [PUT]
func UploadAvatar(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.UploadAvatarRequest
	data, err := c.FormFile("data")
	if err != nil {
		pack.SendFailResponse(c, errno.NewErrNo(errno.ParamMissingErrorCode, "required file but found not "))
		return
	}
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.SendFailResponse(c, errno.NewErrNo(errno.ParamMissingErrorCode, "param missing:"+err.Error()))
		return
	}
	userId := service.GetUserIDFromContext(c)
	avatarUrl, err := service.UploadAvatarGetUrl(data, userId)
	if err != nil {
		pack.SendFailResponse(c, errno.ConvertErr(err))
		return
	}
	resp := new(api.UploadAvatarResponse)
	resp, err = rpc.UploadAvatarRPC(ctx, &user.UploadAvatarRequest{
		AvatarUrl: avatarUrl,
		UserId:    userId,
	})
	if err != nil {
		pack.SendFailResponse(c, errno.ConvertErr(err))
		return
	}
	resp.Base = pack.BuildBaseResp(errno.Success)
	pack.SendResponse(c, resp)
}

//无法将 'data' (类型 *multipart.FileHeader) 用作类型 []byte

// GetInformation .
// @router /user/info [GET]
func GetInformation(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.GetUserInformationRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.SendFailResponse(c, errno.NewErrNo(errno.ParamMissingErrorCode, "param missing:"+err.Error()))
		return
	}
	resp := new(api.GetUserInformationResponse)
	resp, err = rpc.GetUserMessagesRPC(ctx, &user.GetUserInformationRequest{
		UserId: req.UserID,
	})
	if err != nil {
		pack.SendFailResponse(c, errno.ConvertErr(err))
		return
	}
	resp.Base = pack.BuildBaseResp(errno.Success)
	pack.SendResponse(c, resp)
}

// 暂时没有实现的思路
// SearchImage .
// @router /user/image/search [POST]
func SearchImage(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.SearchImagesRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.SendFailResponse(c, errno.ConvertErr(err))
		return
	}

	resp := new(api.SearchImagesResponse)

	pack.SendResponse(c, resp)
}

// GetMFA .
// @router /user/image/search [GET]
func GetMFA(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.GetMFARequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.SendFailResponse(c, errno.NewErrNo(errno.ParamMissingErrorCode, err.Error()))
		return
	}

	resp := new(api.GetMFAResponse)
	userId := service.GetUserIDFromContext(c)
	resp, err = rpc.GetQrcodeRPC(ctx, &user.GetMFARequest{
		UserId: userId,
	})
	if err != nil {
		pack.SendFailResponse(c, errno.ConvertErr(err))
		return
	}
	resp.Base = pack.BuildBaseResp(errno.Success)
	pack.SendResponse(c, resp)
}

// MindBind .
// @router /user/image/search [POST]
func MindBind(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.MFABindRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.SendFailResponse(c, errno.NewErrNo(errno.ParamMissingErrorCode, "param missing:"+err.Error()))
		return
	}

	resp := new(api.MFABindResponse)
	userId := service.GetUserIDFromContext(c)
	resp, err = rpc.MFABindRPC(ctx, &user.MFABindRequest{
		Code:   req.Code,
		Secret: req.Secret,
		UserId: userId,
	})
	if err != nil {
		pack.SendFailResponse(c, errno.ConvertErr(err))
		return
	}
	resp.Base = pack.BuildBaseResp(errno.Success)
	pack.SendResponse(c, resp)
}
