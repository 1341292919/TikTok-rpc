// Code generated by Kitex v0.12.3. DO NOT EDIT.

package videoservice

import (
	video "TikTok-rpc/kitex_gen/video"
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"PublishVideo": kitex.NewMethodInfo(
		publishVideoHandler,
		newVideoServicePublishVideoArgs,
		newVideoServicePublishVideoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"QueryList": kitex.NewMethodInfo(
		queryListHandler,
		newVideoServiceQueryListArgs,
		newVideoServiceQueryListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"SearchVideo": kitex.NewMethodInfo(
		searchVideoHandler,
		newVideoServiceSearchVideoArgs,
		newVideoServiceSearchVideoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetPopularVideo": kitex.NewMethodInfo(
		getPopularVideoHandler,
		newVideoServiceGetPopularVideoArgs,
		newVideoServiceGetPopularVideoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetVideoStream": kitex.NewMethodInfo(
		getVideoStreamHandler,
		newVideoServiceGetVideoStreamArgs,
		newVideoServiceGetVideoStreamResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	videoServiceServiceInfo                = NewServiceInfo()
	videoServiceServiceInfoForClient       = NewServiceInfoForClient()
	videoServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return videoServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return videoServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return videoServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "VideoService"
	handlerType := (*video.VideoService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "video",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.12.3",
		Extra:           extra,
	}
	return svcInfo
}

func publishVideoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServicePublishVideoArgs)
	realResult := result.(*video.VideoServicePublishVideoResult)
	success, err := handler.(video.VideoService).PublishVideo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServicePublishVideoArgs() interface{} {
	return video.NewVideoServicePublishVideoArgs()
}

func newVideoServicePublishVideoResult() interface{} {
	return video.NewVideoServicePublishVideoResult()
}

func queryListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServiceQueryListArgs)
	realResult := result.(*video.VideoServiceQueryListResult)
	success, err := handler.(video.VideoService).QueryList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceQueryListArgs() interface{} {
	return video.NewVideoServiceQueryListArgs()
}

func newVideoServiceQueryListResult() interface{} {
	return video.NewVideoServiceQueryListResult()
}

func searchVideoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServiceSearchVideoArgs)
	realResult := result.(*video.VideoServiceSearchVideoResult)
	success, err := handler.(video.VideoService).SearchVideo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceSearchVideoArgs() interface{} {
	return video.NewVideoServiceSearchVideoArgs()
}

func newVideoServiceSearchVideoResult() interface{} {
	return video.NewVideoServiceSearchVideoResult()
}

func getPopularVideoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServiceGetPopularVideoArgs)
	realResult := result.(*video.VideoServiceGetPopularVideoResult)
	success, err := handler.(video.VideoService).GetPopularVideo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceGetPopularVideoArgs() interface{} {
	return video.NewVideoServiceGetPopularVideoArgs()
}

func newVideoServiceGetPopularVideoResult() interface{} {
	return video.NewVideoServiceGetPopularVideoResult()
}

func getVideoStreamHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServiceGetVideoStreamArgs)
	realResult := result.(*video.VideoServiceGetVideoStreamResult)
	success, err := handler.(video.VideoService).GetVideoStream(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceGetVideoStreamArgs() interface{} {
	return video.NewVideoServiceGetVideoStreamArgs()
}

func newVideoServiceGetVideoStreamResult() interface{} {
	return video.NewVideoServiceGetVideoStreamResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) PublishVideo(ctx context.Context, req *video.PublishRequest) (r *video.PublishResponse, err error) {
	var _args video.VideoServicePublishVideoArgs
	_args.Req = req
	var _result video.VideoServicePublishVideoResult
	if err = p.c.Call(ctx, "PublishVideo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) QueryList(ctx context.Context, req *video.QueryPublishListRequest) (r *video.QueryPublishListResponse, err error) {
	var _args video.VideoServiceQueryListArgs
	_args.Req = req
	var _result video.VideoServiceQueryListResult
	if err = p.c.Call(ctx, "QueryList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SearchVideo(ctx context.Context, req *video.SearchVideoByKeywordRequest) (r *video.SearchVideoByKeywordResponse, err error) {
	var _args video.VideoServiceSearchVideoArgs
	_args.Req = req
	var _result video.VideoServiceSearchVideoResult
	if err = p.c.Call(ctx, "SearchVideo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetPopularVideo(ctx context.Context, req *video.GetPopularListRequest) (r *video.GetPopularListResponse, err error) {
	var _args video.VideoServiceGetPopularVideoArgs
	_args.Req = req
	var _result video.VideoServiceGetPopularVideoResult
	if err = p.c.Call(ctx, "GetPopularVideo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetVideoStream(ctx context.Context, req *video.VideoStreamRequest) (r *video.VideoStreamResponse, err error) {
	var _args video.VideoServiceGetVideoStreamArgs
	_args.Req = req
	var _result video.VideoServiceGetVideoStreamResult
	if err = p.c.Call(ctx, "GetVideoStream", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
