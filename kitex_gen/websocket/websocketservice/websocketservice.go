// Code generated by Kitex v0.12.3. DO NOT EDIT.

package websocketservice

import (
	websocket "TikTok-rpc/kitex_gen/websocket"
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"AddMessage": kitex.NewMethodInfo(
		addMessageHandler,
		newWebsocketServiceAddMessageArgs,
		newWebsocketServiceAddMessageResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"QueryOfflineMessage": kitex.NewMethodInfo(
		queryOfflineMessageHandler,
		newWebsocketServiceQueryOfflineMessageArgs,
		newWebsocketServiceQueryOfflineMessageResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"QueryPrivateHistoryMessage": kitex.NewMethodInfo(
		queryPrivateHistoryMessageHandler,
		newWebsocketServiceQueryPrivateHistoryMessageArgs,
		newWebsocketServiceQueryPrivateHistoryMessageResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"QueryGroupHistoryMessage": kitex.NewMethodInfo(
		queryGroupHistoryMessageHandler,
		newWebsocketServiceQueryGroupHistoryMessageArgs,
		newWebsocketServiceQueryGroupHistoryMessageResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	websocketServiceServiceInfo                = NewServiceInfo()
	websocketServiceServiceInfoForClient       = NewServiceInfoForClient()
	websocketServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return websocketServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return websocketServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return websocketServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "WebsocketService"
	handlerType := (*websocket.WebsocketService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "websocket",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.12.3",
		Extra:           extra,
	}
	return svcInfo
}

func addMessageHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*websocket.WebsocketServiceAddMessageArgs)
	realResult := result.(*websocket.WebsocketServiceAddMessageResult)
	success, err := handler.(websocket.WebsocketService).AddMessage(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newWebsocketServiceAddMessageArgs() interface{} {
	return websocket.NewWebsocketServiceAddMessageArgs()
}

func newWebsocketServiceAddMessageResult() interface{} {
	return websocket.NewWebsocketServiceAddMessageResult()
}

func queryOfflineMessageHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*websocket.WebsocketServiceQueryOfflineMessageArgs)
	realResult := result.(*websocket.WebsocketServiceQueryOfflineMessageResult)
	success, err := handler.(websocket.WebsocketService).QueryOfflineMessage(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newWebsocketServiceQueryOfflineMessageArgs() interface{} {
	return websocket.NewWebsocketServiceQueryOfflineMessageArgs()
}

func newWebsocketServiceQueryOfflineMessageResult() interface{} {
	return websocket.NewWebsocketServiceQueryOfflineMessageResult()
}

func queryPrivateHistoryMessageHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*websocket.WebsocketServiceQueryPrivateHistoryMessageArgs)
	realResult := result.(*websocket.WebsocketServiceQueryPrivateHistoryMessageResult)
	success, err := handler.(websocket.WebsocketService).QueryPrivateHistoryMessage(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newWebsocketServiceQueryPrivateHistoryMessageArgs() interface{} {
	return websocket.NewWebsocketServiceQueryPrivateHistoryMessageArgs()
}

func newWebsocketServiceQueryPrivateHistoryMessageResult() interface{} {
	return websocket.NewWebsocketServiceQueryPrivateHistoryMessageResult()
}

func queryGroupHistoryMessageHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*websocket.WebsocketServiceQueryGroupHistoryMessageArgs)
	realResult := result.(*websocket.WebsocketServiceQueryGroupHistoryMessageResult)
	success, err := handler.(websocket.WebsocketService).QueryGroupHistoryMessage(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newWebsocketServiceQueryGroupHistoryMessageArgs() interface{} {
	return websocket.NewWebsocketServiceQueryGroupHistoryMessageArgs()
}

func newWebsocketServiceQueryGroupHistoryMessageResult() interface{} {
	return websocket.NewWebsocketServiceQueryGroupHistoryMessageResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) AddMessage(ctx context.Context, req *websocket.AddMessageRequest) (r *websocket.AddMessageResponse, err error) {
	var _args websocket.WebsocketServiceAddMessageArgs
	_args.Req = req
	var _result websocket.WebsocketServiceAddMessageResult
	if err = p.c.Call(ctx, "AddMessage", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) QueryOfflineMessage(ctx context.Context, req *websocket.QueryOfflineMessageRequest) (r *websocket.QueryOfflineMessageResponse, err error) {
	var _args websocket.WebsocketServiceQueryOfflineMessageArgs
	_args.Req = req
	var _result websocket.WebsocketServiceQueryOfflineMessageResult
	if err = p.c.Call(ctx, "QueryOfflineMessage", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) QueryPrivateHistoryMessage(ctx context.Context, req *websocket.QueryPrivateHistoryMessageRequest) (r *websocket.QueryPrivateHistoryMessageResponse, err error) {
	var _args websocket.WebsocketServiceQueryPrivateHistoryMessageArgs
	_args.Req = req
	var _result websocket.WebsocketServiceQueryPrivateHistoryMessageResult
	if err = p.c.Call(ctx, "QueryPrivateHistoryMessage", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) QueryGroupHistoryMessage(ctx context.Context, req *websocket.QueryGroupHistoryMessageRequest) (r *websocket.QueryGroupHistoryMessageResponse, err error) {
	var _args websocket.WebsocketServiceQueryGroupHistoryMessageArgs
	_args.Req = req
	var _result websocket.WebsocketServiceQueryGroupHistoryMessageResult
	if err = p.c.Call(ctx, "QueryGroupHistoryMessage", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
