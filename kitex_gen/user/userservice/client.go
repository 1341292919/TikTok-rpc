// Code generated by Kitex v0.12.3. DO NOT EDIT.

package userservice

import (
	user "TikTok-rpc/kitex_gen/user"
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	Register(ctx context.Context, req *user.RegisterRequest, callOptions ...callopt.Option) (r *user.RegisterResponse, err error)
	Login(ctx context.Context, req *user.LoginRequest, callOptions ...callopt.Option) (r *user.LoginResponse, err error)
	UploadAvatar(ctx context.Context, req *user.UploadAvatarRequest, callOptions ...callopt.Option) (r *user.UploadAvatarResponse, err error)
	GetInformation(ctx context.Context, req *user.GetUserInformationRequest, callOptions ...callopt.Option) (r *user.GetUserInformationResponse, err error)
	SearchImage(ctx context.Context, req *user.SearchImagesRequest, callOptions ...callopt.Option) (r *user.SearchImagesResponse, err error)
	GetMFA(ctx context.Context, req *user.GetMFARequest, callOptions ...callopt.Option) (r *user.GetMFAResponse, err error)
	MindBind(ctx context.Context, req *user.MFABindRequest, callOptions ...callopt.Option) (r *user.MFABindResponse, err error)
	QueryUserIdByUsername(ctx context.Context, req *user.QueryUserIdByUsernameRequest, callOptions ...callopt.Option) (r *user.QueryUserIdByUsernameResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfoForClient(), options...)
	if err != nil {
		return nil, err
	}
	return &kUserServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kUserServiceClient struct {
	*kClient
}

func (p *kUserServiceClient) Register(ctx context.Context, req *user.RegisterRequest, callOptions ...callopt.Option) (r *user.RegisterResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Register(ctx, req)
}

func (p *kUserServiceClient) Login(ctx context.Context, req *user.LoginRequest, callOptions ...callopt.Option) (r *user.LoginResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Login(ctx, req)
}

func (p *kUserServiceClient) UploadAvatar(ctx context.Context, req *user.UploadAvatarRequest, callOptions ...callopt.Option) (r *user.UploadAvatarResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UploadAvatar(ctx, req)
}

func (p *kUserServiceClient) GetInformation(ctx context.Context, req *user.GetUserInformationRequest, callOptions ...callopt.Option) (r *user.GetUserInformationResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetInformation(ctx, req)
}

func (p *kUserServiceClient) SearchImage(ctx context.Context, req *user.SearchImagesRequest, callOptions ...callopt.Option) (r *user.SearchImagesResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.SearchImage(ctx, req)
}

func (p *kUserServiceClient) GetMFA(ctx context.Context, req *user.GetMFARequest, callOptions ...callopt.Option) (r *user.GetMFAResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetMFA(ctx, req)
}

func (p *kUserServiceClient) MindBind(ctx context.Context, req *user.MFABindRequest, callOptions ...callopt.Option) (r *user.MFABindResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.MindBind(ctx, req)
}

func (p *kUserServiceClient) QueryUserIdByUsername(ctx context.Context, req *user.QueryUserIdByUsernameRequest, callOptions ...callopt.Option) (r *user.QueryUserIdByUsernameResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.QueryUserIdByUsername(ctx, req)
}
