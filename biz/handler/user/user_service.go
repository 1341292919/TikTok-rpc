// Code generated by hertz generator.

package user

import (
	"context"

	user "TikTok-rpc/biz/model/user"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// Register .
// @router /user/register [POST]
func Register(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.RegisterRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(user.RegisterResponse)

	c.JSON(consts.StatusOK, resp)
}

// Login .
// @router /user/login [POST]
func Login(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.LoginRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(user.LoginResponse)

	c.JSON(consts.StatusOK, resp)
}

// UploadAvatar .
// @router /user/avatar/upload [PUT]
func UploadAvatar(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.UploadAvatarRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(user.UploadAvatarResponse)

	c.JSON(consts.StatusOK, resp)
}

// GetInformation .
// @router /user/info [GET]
func GetInformation(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.GetUserInformationRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(user.GetUserInformationResponse)

	c.JSON(consts.StatusOK, resp)
}

// SearchImage .
// @router /user/image/search [POST]
func SearchImage(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.SearchImagesRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(user.SearchImagesResponse)

	c.JSON(consts.StatusOK, resp)
}

// GetMFA .
// @router /user/image/search [GET]
func GetMFA(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.GetMFARequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(user.GetMFAResponse)

	c.JSON(consts.StatusOK, resp)
}

// MindBind .
// @router /user/image/search [POST]
func MindBind(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.MFABindRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(user.MFABindResponse)

	c.JSON(consts.StatusOK, resp)
}
