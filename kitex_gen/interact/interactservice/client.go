// Code generated by Kitex v0.12.3. DO NOT EDIT.

package interactservice

import (
	interact "TikTok-rpc/kitex_gen/interact"
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	Like(ctx context.Context, req *interact.LikeRequest, callOptions ...callopt.Option) (r *interact.LikeResponse, err error)
	QueryLikeList(ctx context.Context, req *interact.QueryLikeListRequest, callOptions ...callopt.Option) (r *interact.QueryLikeListResponse, err error)
	Comment(ctx context.Context, req *interact.CommentRequest, callOptions ...callopt.Option) (r *interact.CommentResponse, err error)
	QueryCommentList(ctx context.Context, req *interact.QueryCommentListRequest, callOptions ...callopt.Option) (r *interact.QueryCommentListResponse, err error)
	DeleteComment(ctx context.Context, req *interact.DeleteCommentRequest, callOptions ...callopt.Option) (r *interact.DeleteCommentResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfoForClient(), options...)
	if err != nil {
		return nil, err
	}
	return &kInteractServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kInteractServiceClient struct {
	*kClient
}

func (p *kInteractServiceClient) Like(ctx context.Context, req *interact.LikeRequest, callOptions ...callopt.Option) (r *interact.LikeResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Like(ctx, req)
}

func (p *kInteractServiceClient) QueryLikeList(ctx context.Context, req *interact.QueryLikeListRequest, callOptions ...callopt.Option) (r *interact.QueryLikeListResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.QueryLikeList(ctx, req)
}

func (p *kInteractServiceClient) Comment(ctx context.Context, req *interact.CommentRequest, callOptions ...callopt.Option) (r *interact.CommentResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Comment(ctx, req)
}

func (p *kInteractServiceClient) QueryCommentList(ctx context.Context, req *interact.QueryCommentListRequest, callOptions ...callopt.Option) (r *interact.QueryCommentListResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.QueryCommentList(ctx, req)
}

func (p *kInteractServiceClient) DeleteComment(ctx context.Context, req *interact.DeleteCommentRequest, callOptions ...callopt.Option) (r *interact.DeleteCommentResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteComment(ctx, req)
}
