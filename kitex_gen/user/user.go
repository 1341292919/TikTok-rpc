// Code generated by thriftgo (0.3.18). DO NOT EDIT.

package user

import (
	"TikTok-rpc/kitex_gen/model"
	"bytes"
	"context"
	"fmt"
	"strings"
)

type RegisterRequest struct {
	Username string `thrift:"username,1,required" frugal:"1,required,string" json:"username"`
	Password string `thrift:"password,2,required" frugal:"2,required,string" json:"password"`
}

func NewRegisterRequest() *RegisterRequest {
	return &RegisterRequest{}
}

func (p *RegisterRequest) InitDefault() {
}

func (p *RegisterRequest) GetUsername() (v string) {
	return p.Username
}

func (p *RegisterRequest) GetPassword() (v string) {
	return p.Password
}
func (p *RegisterRequest) SetUsername(val string) {
	p.Username = val
}
func (p *RegisterRequest) SetPassword(val string) {
	p.Password = val
}

func (p *RegisterRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RegisterRequest(%+v)", *p)
}

func (p *RegisterRequest) DeepEqual(ano *RegisterRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Username) {
		return false
	}
	if !p.Field2DeepEqual(ano.Password) {
		return false
	}
	return true
}

func (p *RegisterRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Username, src) != 0 {
		return false
	}
	return true
}
func (p *RegisterRequest) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Password, src) != 0 {
		return false
	}
	return true
}

var fieldIDToName_RegisterRequest = map[int16]string{
	1: "username",
	2: "password",
}

type RegisterResponse struct {
	Base   *model.BaseResp `thrift:"base,1" frugal:"1,default,model.BaseResp" json:"base"`
	UserId *int64          `thrift:"user_id,2,optional" frugal:"2,optional,i64" json:"user_id,omitempty"`
}

func NewRegisterResponse() *RegisterResponse {
	return &RegisterResponse{}
}

func (p *RegisterResponse) InitDefault() {
}

var RegisterResponse_Base_DEFAULT *model.BaseResp

func (p *RegisterResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return RegisterResponse_Base_DEFAULT
	}
	return p.Base
}

var RegisterResponse_UserId_DEFAULT int64

func (p *RegisterResponse) GetUserId() (v int64) {
	if !p.IsSetUserId() {
		return RegisterResponse_UserId_DEFAULT
	}
	return *p.UserId
}
func (p *RegisterResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *RegisterResponse) SetUserId(val *int64) {
	p.UserId = val
}

func (p *RegisterResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *RegisterResponse) IsSetUserId() bool {
	return p.UserId != nil
}

func (p *RegisterResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RegisterResponse(%+v)", *p)
}

func (p *RegisterResponse) DeepEqual(ano *RegisterResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	if !p.Field2DeepEqual(ano.UserId) {
		return false
	}
	return true
}

func (p *RegisterResponse) Field1DeepEqual(src *model.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}
func (p *RegisterResponse) Field2DeepEqual(src *int64) bool {

	if p.UserId == src {
		return true
	} else if p.UserId == nil || src == nil {
		return false
	}
	if *p.UserId != *src {
		return false
	}
	return true
}

var fieldIDToName_RegisterResponse = map[int16]string{
	1: "base",
	2: "user_id",
}

type LoginRequest struct {
	Username string  `thrift:"username,1,required" frugal:"1,required,string" json:"username"`
	Password string  `thrift:"password,2,required" frugal:"2,required,string" json:"password"`
	Code     *string `thrift:"code,3,optional" frugal:"3,optional,string" json:"code,omitempty"`
}

func NewLoginRequest() *LoginRequest {
	return &LoginRequest{}
}

func (p *LoginRequest) InitDefault() {
}

func (p *LoginRequest) GetUsername() (v string) {
	return p.Username
}

func (p *LoginRequest) GetPassword() (v string) {
	return p.Password
}

var LoginRequest_Code_DEFAULT string

func (p *LoginRequest) GetCode() (v string) {
	if !p.IsSetCode() {
		return LoginRequest_Code_DEFAULT
	}
	return *p.Code
}
func (p *LoginRequest) SetUsername(val string) {
	p.Username = val
}
func (p *LoginRequest) SetPassword(val string) {
	p.Password = val
}
func (p *LoginRequest) SetCode(val *string) {
	p.Code = val
}

func (p *LoginRequest) IsSetCode() bool {
	return p.Code != nil
}

func (p *LoginRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LoginRequest(%+v)", *p)
}

func (p *LoginRequest) DeepEqual(ano *LoginRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Username) {
		return false
	}
	if !p.Field2DeepEqual(ano.Password) {
		return false
	}
	if !p.Field3DeepEqual(ano.Code) {
		return false
	}
	return true
}

func (p *LoginRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Username, src) != 0 {
		return false
	}
	return true
}
func (p *LoginRequest) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Password, src) != 0 {
		return false
	}
	return true
}
func (p *LoginRequest) Field3DeepEqual(src *string) bool {

	if p.Code == src {
		return true
	} else if p.Code == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Code, *src) != 0 {
		return false
	}
	return true
}

var fieldIDToName_LoginRequest = map[int16]string{
	1: "username",
	2: "password",
	3: "code",
}

type LoginResponse struct {
	Base *model.BaseResp `thrift:"base,1" frugal:"1,default,model.BaseResp" json:"base"`
	Data *model.User     `thrift:"data,2,optional" frugal:"2,optional,model.User" json:"data,omitempty"`
}

func NewLoginResponse() *LoginResponse {
	return &LoginResponse{}
}

func (p *LoginResponse) InitDefault() {
}

var LoginResponse_Base_DEFAULT *model.BaseResp

func (p *LoginResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return LoginResponse_Base_DEFAULT
	}
	return p.Base
}

var LoginResponse_Data_DEFAULT *model.User

func (p *LoginResponse) GetData() (v *model.User) {
	if !p.IsSetData() {
		return LoginResponse_Data_DEFAULT
	}
	return p.Data
}
func (p *LoginResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *LoginResponse) SetData(val *model.User) {
	p.Data = val
}

func (p *LoginResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *LoginResponse) IsSetData() bool {
	return p.Data != nil
}

func (p *LoginResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LoginResponse(%+v)", *p)
}

func (p *LoginResponse) DeepEqual(ano *LoginResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	if !p.Field2DeepEqual(ano.Data) {
		return false
	}
	return true
}

func (p *LoginResponse) Field1DeepEqual(src *model.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}
func (p *LoginResponse) Field2DeepEqual(src *model.User) bool {

	if !p.Data.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_LoginResponse = map[int16]string{
	1: "base",
	2: "data",
}

type SearchImagesRequest struct {
	Data []byte `thrift:"data,1" frugal:"1,default,binary" json:"data"`
}

func NewSearchImagesRequest() *SearchImagesRequest {
	return &SearchImagesRequest{}
}

func (p *SearchImagesRequest) InitDefault() {
}

func (p *SearchImagesRequest) GetData() (v []byte) {
	return p.Data
}
func (p *SearchImagesRequest) SetData(val []byte) {
	p.Data = val
}

func (p *SearchImagesRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SearchImagesRequest(%+v)", *p)
}

func (p *SearchImagesRequest) DeepEqual(ano *SearchImagesRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Data) {
		return false
	}
	return true
}

func (p *SearchImagesRequest) Field1DeepEqual(src []byte) bool {

	if bytes.Compare(p.Data, src) != 0 {
		return false
	}
	return true
}

var fieldIDToName_SearchImagesRequest = map[int16]string{
	1: "data",
}

type SearchImagesResponse struct {
	Base *model.BaseResp `thrift:"base,1" frugal:"1,default,model.BaseResp" json:"base"`
	Data *string         `thrift:"data,2,optional" frugal:"2,optional,string" json:"data,omitempty"`
}

func NewSearchImagesResponse() *SearchImagesResponse {
	return &SearchImagesResponse{}
}

func (p *SearchImagesResponse) InitDefault() {
}

var SearchImagesResponse_Base_DEFAULT *model.BaseResp

func (p *SearchImagesResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return SearchImagesResponse_Base_DEFAULT
	}
	return p.Base
}

var SearchImagesResponse_Data_DEFAULT string

func (p *SearchImagesResponse) GetData() (v string) {
	if !p.IsSetData() {
		return SearchImagesResponse_Data_DEFAULT
	}
	return *p.Data
}
func (p *SearchImagesResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *SearchImagesResponse) SetData(val *string) {
	p.Data = val
}

func (p *SearchImagesResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *SearchImagesResponse) IsSetData() bool {
	return p.Data != nil
}

func (p *SearchImagesResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SearchImagesResponse(%+v)", *p)
}

func (p *SearchImagesResponse) DeepEqual(ano *SearchImagesResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	if !p.Field2DeepEqual(ano.Data) {
		return false
	}
	return true
}

func (p *SearchImagesResponse) Field1DeepEqual(src *model.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}
func (p *SearchImagesResponse) Field2DeepEqual(src *string) bool {

	if p.Data == src {
		return true
	} else if p.Data == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Data, *src) != 0 {
		return false
	}
	return true
}

var fieldIDToName_SearchImagesResponse = map[int16]string{
	1: "base",
	2: "data",
}

type UploadAvatarRequest struct {
	AvatarUrl string `thrift:"avatar_url,1,required" frugal:"1,required,string" json:"avatar_url"`
	UserId    int64  `thrift:"user_id,2,required" frugal:"2,required,i64" json:"user_id"`
}

func NewUploadAvatarRequest() *UploadAvatarRequest {
	return &UploadAvatarRequest{}
}

func (p *UploadAvatarRequest) InitDefault() {
}

func (p *UploadAvatarRequest) GetAvatarUrl() (v string) {
	return p.AvatarUrl
}

func (p *UploadAvatarRequest) GetUserId() (v int64) {
	return p.UserId
}
func (p *UploadAvatarRequest) SetAvatarUrl(val string) {
	p.AvatarUrl = val
}
func (p *UploadAvatarRequest) SetUserId(val int64) {
	p.UserId = val
}

func (p *UploadAvatarRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UploadAvatarRequest(%+v)", *p)
}

func (p *UploadAvatarRequest) DeepEqual(ano *UploadAvatarRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.AvatarUrl) {
		return false
	}
	if !p.Field2DeepEqual(ano.UserId) {
		return false
	}
	return true
}

func (p *UploadAvatarRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.AvatarUrl, src) != 0 {
		return false
	}
	return true
}
func (p *UploadAvatarRequest) Field2DeepEqual(src int64) bool {

	if p.UserId != src {
		return false
	}
	return true
}

var fieldIDToName_UploadAvatarRequest = map[int16]string{
	1: "avatar_url",
	2: "user_id",
}

type UploadAvatarResponse struct {
	Base *model.BaseResp `thrift:"base,1" frugal:"1,default,model.BaseResp" json:"base"`
	Data *model.User     `thrift:"data,2,optional" frugal:"2,optional,model.User" json:"data,omitempty"`
}

func NewUploadAvatarResponse() *UploadAvatarResponse {
	return &UploadAvatarResponse{}
}

func (p *UploadAvatarResponse) InitDefault() {
}

var UploadAvatarResponse_Base_DEFAULT *model.BaseResp

func (p *UploadAvatarResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return UploadAvatarResponse_Base_DEFAULT
	}
	return p.Base
}

var UploadAvatarResponse_Data_DEFAULT *model.User

func (p *UploadAvatarResponse) GetData() (v *model.User) {
	if !p.IsSetData() {
		return UploadAvatarResponse_Data_DEFAULT
	}
	return p.Data
}
func (p *UploadAvatarResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *UploadAvatarResponse) SetData(val *model.User) {
	p.Data = val
}

func (p *UploadAvatarResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *UploadAvatarResponse) IsSetData() bool {
	return p.Data != nil
}

func (p *UploadAvatarResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UploadAvatarResponse(%+v)", *p)
}

func (p *UploadAvatarResponse) DeepEqual(ano *UploadAvatarResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	if !p.Field2DeepEqual(ano.Data) {
		return false
	}
	return true
}

func (p *UploadAvatarResponse) Field1DeepEqual(src *model.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}
func (p *UploadAvatarResponse) Field2DeepEqual(src *model.User) bool {

	if !p.Data.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_UploadAvatarResponse = map[int16]string{
	1: "base",
	2: "data",
}

type GetUserInformationRequest struct {
	UserId int64 `thrift:"user_id,1,required" frugal:"1,required,i64" json:"user_id"`
}

func NewGetUserInformationRequest() *GetUserInformationRequest {
	return &GetUserInformationRequest{}
}

func (p *GetUserInformationRequest) InitDefault() {
}

func (p *GetUserInformationRequest) GetUserId() (v int64) {
	return p.UserId
}
func (p *GetUserInformationRequest) SetUserId(val int64) {
	p.UserId = val
}

func (p *GetUserInformationRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetUserInformationRequest(%+v)", *p)
}

func (p *GetUserInformationRequest) DeepEqual(ano *GetUserInformationRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.UserId) {
		return false
	}
	return true
}

func (p *GetUserInformationRequest) Field1DeepEqual(src int64) bool {

	if p.UserId != src {
		return false
	}
	return true
}

var fieldIDToName_GetUserInformationRequest = map[int16]string{
	1: "user_id",
}

type GetUserInformationResponse struct {
	Base *model.BaseResp `thrift:"base,1" frugal:"1,default,model.BaseResp" json:"base"`
	Data *model.User     `thrift:"data,2,optional" frugal:"2,optional,model.User" json:"data,omitempty"`
}

func NewGetUserInformationResponse() *GetUserInformationResponse {
	return &GetUserInformationResponse{}
}

func (p *GetUserInformationResponse) InitDefault() {
}

var GetUserInformationResponse_Base_DEFAULT *model.BaseResp

func (p *GetUserInformationResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return GetUserInformationResponse_Base_DEFAULT
	}
	return p.Base
}

var GetUserInformationResponse_Data_DEFAULT *model.User

func (p *GetUserInformationResponse) GetData() (v *model.User) {
	if !p.IsSetData() {
		return GetUserInformationResponse_Data_DEFAULT
	}
	return p.Data
}
func (p *GetUserInformationResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *GetUserInformationResponse) SetData(val *model.User) {
	p.Data = val
}

func (p *GetUserInformationResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetUserInformationResponse) IsSetData() bool {
	return p.Data != nil
}

func (p *GetUserInformationResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetUserInformationResponse(%+v)", *p)
}

func (p *GetUserInformationResponse) DeepEqual(ano *GetUserInformationResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	if !p.Field2DeepEqual(ano.Data) {
		return false
	}
	return true
}

func (p *GetUserInformationResponse) Field1DeepEqual(src *model.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetUserInformationResponse) Field2DeepEqual(src *model.User) bool {

	if !p.Data.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_GetUserInformationResponse = map[int16]string{
	1: "base",
	2: "data",
}

type GetMFARequest struct {
	UserId int64 `thrift:"user_id,1,required" frugal:"1,required,i64" json:"user_id"`
}

func NewGetMFARequest() *GetMFARequest {
	return &GetMFARequest{}
}

func (p *GetMFARequest) InitDefault() {
}

func (p *GetMFARequest) GetUserId() (v int64) {
	return p.UserId
}
func (p *GetMFARequest) SetUserId(val int64) {
	p.UserId = val
}

func (p *GetMFARequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetMFARequest(%+v)", *p)
}

func (p *GetMFARequest) DeepEqual(ano *GetMFARequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.UserId) {
		return false
	}
	return true
}

func (p *GetMFARequest) Field1DeepEqual(src int64) bool {

	if p.UserId != src {
		return false
	}
	return true
}

var fieldIDToName_GetMFARequest = map[int16]string{
	1: "user_id",
}

type GetMFAResponse struct {
	Base *model.BaseResp   `thrift:"base,1" frugal:"1,default,model.BaseResp" json:"base"`
	Data *model.MFAMessage `thrift:"data,2,optional" frugal:"2,optional,model.MFAMessage" json:"data,omitempty"`
}

func NewGetMFAResponse() *GetMFAResponse {
	return &GetMFAResponse{}
}

func (p *GetMFAResponse) InitDefault() {
}

var GetMFAResponse_Base_DEFAULT *model.BaseResp

func (p *GetMFAResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return GetMFAResponse_Base_DEFAULT
	}
	return p.Base
}

var GetMFAResponse_Data_DEFAULT *model.MFAMessage

func (p *GetMFAResponse) GetData() (v *model.MFAMessage) {
	if !p.IsSetData() {
		return GetMFAResponse_Data_DEFAULT
	}
	return p.Data
}
func (p *GetMFAResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *GetMFAResponse) SetData(val *model.MFAMessage) {
	p.Data = val
}

func (p *GetMFAResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetMFAResponse) IsSetData() bool {
	return p.Data != nil
}

func (p *GetMFAResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetMFAResponse(%+v)", *p)
}

func (p *GetMFAResponse) DeepEqual(ano *GetMFAResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	if !p.Field2DeepEqual(ano.Data) {
		return false
	}
	return true
}

func (p *GetMFAResponse) Field1DeepEqual(src *model.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetMFAResponse) Field2DeepEqual(src *model.MFAMessage) bool {

	if !p.Data.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_GetMFAResponse = map[int16]string{
	1: "base",
	2: "data",
}

type MFABindRequest struct {
	Code   string `thrift:"code,1,required" frugal:"1,required,string" json:"code"`
	Secret string `thrift:"secret,2,required" frugal:"2,required,string" json:"secret"`
	UserId int64  `thrift:"user_id,3,required" frugal:"3,required,i64" json:"user_id"`
}

func NewMFABindRequest() *MFABindRequest {
	return &MFABindRequest{}
}

func (p *MFABindRequest) InitDefault() {
}

func (p *MFABindRequest) GetCode() (v string) {
	return p.Code
}

func (p *MFABindRequest) GetSecret() (v string) {
	return p.Secret
}

func (p *MFABindRequest) GetUserId() (v int64) {
	return p.UserId
}
func (p *MFABindRequest) SetCode(val string) {
	p.Code = val
}
func (p *MFABindRequest) SetSecret(val string) {
	p.Secret = val
}
func (p *MFABindRequest) SetUserId(val int64) {
	p.UserId = val
}

func (p *MFABindRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MFABindRequest(%+v)", *p)
}

func (p *MFABindRequest) DeepEqual(ano *MFABindRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Code) {
		return false
	}
	if !p.Field2DeepEqual(ano.Secret) {
		return false
	}
	if !p.Field3DeepEqual(ano.UserId) {
		return false
	}
	return true
}

func (p *MFABindRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Code, src) != 0 {
		return false
	}
	return true
}
func (p *MFABindRequest) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Secret, src) != 0 {
		return false
	}
	return true
}
func (p *MFABindRequest) Field3DeepEqual(src int64) bool {

	if p.UserId != src {
		return false
	}
	return true
}

var fieldIDToName_MFABindRequest = map[int16]string{
	1: "code",
	2: "secret",
	3: "user_id",
}

type MFABindResponse struct {
	Base *model.BaseResp `thrift:"base,1" frugal:"1,default,model.BaseResp" json:"base"`
}

func NewMFABindResponse() *MFABindResponse {
	return &MFABindResponse{}
}

func (p *MFABindResponse) InitDefault() {
}

var MFABindResponse_Base_DEFAULT *model.BaseResp

func (p *MFABindResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return MFABindResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *MFABindResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}

func (p *MFABindResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *MFABindResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MFABindResponse(%+v)", *p)
}

func (p *MFABindResponse) DeepEqual(ano *MFABindResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *MFABindResponse) Field1DeepEqual(src *model.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_MFABindResponse = map[int16]string{
	1: "base",
}

type QueryUserIdByUsernameRequest struct {
	Username string `thrift:"username,1,required" frugal:"1,required,string" json:"username"`
}

func NewQueryUserIdByUsernameRequest() *QueryUserIdByUsernameRequest {
	return &QueryUserIdByUsernameRequest{}
}

func (p *QueryUserIdByUsernameRequest) InitDefault() {
}

func (p *QueryUserIdByUsernameRequest) GetUsername() (v string) {
	return p.Username
}
func (p *QueryUserIdByUsernameRequest) SetUsername(val string) {
	p.Username = val
}

func (p *QueryUserIdByUsernameRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryUserIdByUsernameRequest(%+v)", *p)
}

func (p *QueryUserIdByUsernameRequest) DeepEqual(ano *QueryUserIdByUsernameRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Username) {
		return false
	}
	return true
}

func (p *QueryUserIdByUsernameRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Username, src) != 0 {
		return false
	}
	return true
}

var fieldIDToName_QueryUserIdByUsernameRequest = map[int16]string{
	1: "username",
}

type QueryUserIdByUsernameResponse struct {
	Base *model.BaseResp `thrift:"base,1" frugal:"1,default,model.BaseResp" json:"base"`
	Id   *int64          `thrift:"id,2,optional" frugal:"2,optional,i64" json:"id,omitempty"`
}

func NewQueryUserIdByUsernameResponse() *QueryUserIdByUsernameResponse {
	return &QueryUserIdByUsernameResponse{}
}

func (p *QueryUserIdByUsernameResponse) InitDefault() {
}

var QueryUserIdByUsernameResponse_Base_DEFAULT *model.BaseResp

func (p *QueryUserIdByUsernameResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return QueryUserIdByUsernameResponse_Base_DEFAULT
	}
	return p.Base
}

var QueryUserIdByUsernameResponse_Id_DEFAULT int64

func (p *QueryUserIdByUsernameResponse) GetId() (v int64) {
	if !p.IsSetId() {
		return QueryUserIdByUsernameResponse_Id_DEFAULT
	}
	return *p.Id
}
func (p *QueryUserIdByUsernameResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *QueryUserIdByUsernameResponse) SetId(val *int64) {
	p.Id = val
}

func (p *QueryUserIdByUsernameResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *QueryUserIdByUsernameResponse) IsSetId() bool {
	return p.Id != nil
}

func (p *QueryUserIdByUsernameResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryUserIdByUsernameResponse(%+v)", *p)
}

func (p *QueryUserIdByUsernameResponse) DeepEqual(ano *QueryUserIdByUsernameResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	if !p.Field2DeepEqual(ano.Id) {
		return false
	}
	return true
}

func (p *QueryUserIdByUsernameResponse) Field1DeepEqual(src *model.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}
func (p *QueryUserIdByUsernameResponse) Field2DeepEqual(src *int64) bool {

	if p.Id == src {
		return true
	} else if p.Id == nil || src == nil {
		return false
	}
	if *p.Id != *src {
		return false
	}
	return true
}

var fieldIDToName_QueryUserIdByUsernameResponse = map[int16]string{
	1: "base",
	2: "id",
}

type UserService interface {
	Register(ctx context.Context, req *RegisterRequest) (r *RegisterResponse, err error)

	Login(ctx context.Context, req *LoginRequest) (r *LoginResponse, err error)

	UploadAvatar(ctx context.Context, req *UploadAvatarRequest) (r *UploadAvatarResponse, err error)

	GetInformation(ctx context.Context, req *GetUserInformationRequest) (r *GetUserInformationResponse, err error)

	SearchImage(ctx context.Context, req *SearchImagesRequest) (r *SearchImagesResponse, err error)

	GetMFA(ctx context.Context, req *GetMFARequest) (r *GetMFAResponse, err error)

	MindBind(ctx context.Context, req *MFABindRequest) (r *MFABindResponse, err error)

	QueryUserIdByUsername(ctx context.Context, req *QueryUserIdByUsernameRequest) (r *QueryUserIdByUsernameResponse, err error)
}

type UserServiceRegisterArgs struct {
	Req *RegisterRequest `thrift:"req,1" frugal:"1,default,RegisterRequest" json:"req"`
}

func NewUserServiceRegisterArgs() *UserServiceRegisterArgs {
	return &UserServiceRegisterArgs{}
}

func (p *UserServiceRegisterArgs) InitDefault() {
}

var UserServiceRegisterArgs_Req_DEFAULT *RegisterRequest

func (p *UserServiceRegisterArgs) GetReq() (v *RegisterRequest) {
	if !p.IsSetReq() {
		return UserServiceRegisterArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *UserServiceRegisterArgs) SetReq(val *RegisterRequest) {
	p.Req = val
}

func (p *UserServiceRegisterArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserServiceRegisterArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceRegisterArgs(%+v)", *p)
}

func (p *UserServiceRegisterArgs) DeepEqual(ano *UserServiceRegisterArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *UserServiceRegisterArgs) Field1DeepEqual(src *RegisterRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_UserServiceRegisterArgs = map[int16]string{
	1: "req",
}

type UserServiceRegisterResult struct {
	Success *RegisterResponse `thrift:"success,0,optional" frugal:"0,optional,RegisterResponse" json:"success,omitempty"`
}

func NewUserServiceRegisterResult() *UserServiceRegisterResult {
	return &UserServiceRegisterResult{}
}

func (p *UserServiceRegisterResult) InitDefault() {
}

var UserServiceRegisterResult_Success_DEFAULT *RegisterResponse

func (p *UserServiceRegisterResult) GetSuccess() (v *RegisterResponse) {
	if !p.IsSetSuccess() {
		return UserServiceRegisterResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserServiceRegisterResult) SetSuccess(x interface{}) {
	p.Success = x.(*RegisterResponse)
}

func (p *UserServiceRegisterResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserServiceRegisterResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceRegisterResult(%+v)", *p)
}

func (p *UserServiceRegisterResult) DeepEqual(ano *UserServiceRegisterResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *UserServiceRegisterResult) Field0DeepEqual(src *RegisterResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_UserServiceRegisterResult = map[int16]string{
	0: "success",
}

type UserServiceLoginArgs struct {
	Req *LoginRequest `thrift:"req,1" frugal:"1,default,LoginRequest" json:"req"`
}

func NewUserServiceLoginArgs() *UserServiceLoginArgs {
	return &UserServiceLoginArgs{}
}

func (p *UserServiceLoginArgs) InitDefault() {
}

var UserServiceLoginArgs_Req_DEFAULT *LoginRequest

func (p *UserServiceLoginArgs) GetReq() (v *LoginRequest) {
	if !p.IsSetReq() {
		return UserServiceLoginArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *UserServiceLoginArgs) SetReq(val *LoginRequest) {
	p.Req = val
}

func (p *UserServiceLoginArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserServiceLoginArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceLoginArgs(%+v)", *p)
}

func (p *UserServiceLoginArgs) DeepEqual(ano *UserServiceLoginArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *UserServiceLoginArgs) Field1DeepEqual(src *LoginRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_UserServiceLoginArgs = map[int16]string{
	1: "req",
}

type UserServiceLoginResult struct {
	Success *LoginResponse `thrift:"success,0,optional" frugal:"0,optional,LoginResponse" json:"success,omitempty"`
}

func NewUserServiceLoginResult() *UserServiceLoginResult {
	return &UserServiceLoginResult{}
}

func (p *UserServiceLoginResult) InitDefault() {
}

var UserServiceLoginResult_Success_DEFAULT *LoginResponse

func (p *UserServiceLoginResult) GetSuccess() (v *LoginResponse) {
	if !p.IsSetSuccess() {
		return UserServiceLoginResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserServiceLoginResult) SetSuccess(x interface{}) {
	p.Success = x.(*LoginResponse)
}

func (p *UserServiceLoginResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserServiceLoginResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceLoginResult(%+v)", *p)
}

func (p *UserServiceLoginResult) DeepEqual(ano *UserServiceLoginResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *UserServiceLoginResult) Field0DeepEqual(src *LoginResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_UserServiceLoginResult = map[int16]string{
	0: "success",
}

type UserServiceUploadAvatarArgs struct {
	Req *UploadAvatarRequest `thrift:"req,1" frugal:"1,default,UploadAvatarRequest" json:"req"`
}

func NewUserServiceUploadAvatarArgs() *UserServiceUploadAvatarArgs {
	return &UserServiceUploadAvatarArgs{}
}

func (p *UserServiceUploadAvatarArgs) InitDefault() {
}

var UserServiceUploadAvatarArgs_Req_DEFAULT *UploadAvatarRequest

func (p *UserServiceUploadAvatarArgs) GetReq() (v *UploadAvatarRequest) {
	if !p.IsSetReq() {
		return UserServiceUploadAvatarArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *UserServiceUploadAvatarArgs) SetReq(val *UploadAvatarRequest) {
	p.Req = val
}

func (p *UserServiceUploadAvatarArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserServiceUploadAvatarArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceUploadAvatarArgs(%+v)", *p)
}

func (p *UserServiceUploadAvatarArgs) DeepEqual(ano *UserServiceUploadAvatarArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *UserServiceUploadAvatarArgs) Field1DeepEqual(src *UploadAvatarRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_UserServiceUploadAvatarArgs = map[int16]string{
	1: "req",
}

type UserServiceUploadAvatarResult struct {
	Success *UploadAvatarResponse `thrift:"success,0,optional" frugal:"0,optional,UploadAvatarResponse" json:"success,omitempty"`
}

func NewUserServiceUploadAvatarResult() *UserServiceUploadAvatarResult {
	return &UserServiceUploadAvatarResult{}
}

func (p *UserServiceUploadAvatarResult) InitDefault() {
}

var UserServiceUploadAvatarResult_Success_DEFAULT *UploadAvatarResponse

func (p *UserServiceUploadAvatarResult) GetSuccess() (v *UploadAvatarResponse) {
	if !p.IsSetSuccess() {
		return UserServiceUploadAvatarResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserServiceUploadAvatarResult) SetSuccess(x interface{}) {
	p.Success = x.(*UploadAvatarResponse)
}

func (p *UserServiceUploadAvatarResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserServiceUploadAvatarResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceUploadAvatarResult(%+v)", *p)
}

func (p *UserServiceUploadAvatarResult) DeepEqual(ano *UserServiceUploadAvatarResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *UserServiceUploadAvatarResult) Field0DeepEqual(src *UploadAvatarResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_UserServiceUploadAvatarResult = map[int16]string{
	0: "success",
}

type UserServiceGetInformationArgs struct {
	Req *GetUserInformationRequest `thrift:"req,1" frugal:"1,default,GetUserInformationRequest" json:"req"`
}

func NewUserServiceGetInformationArgs() *UserServiceGetInformationArgs {
	return &UserServiceGetInformationArgs{}
}

func (p *UserServiceGetInformationArgs) InitDefault() {
}

var UserServiceGetInformationArgs_Req_DEFAULT *GetUserInformationRequest

func (p *UserServiceGetInformationArgs) GetReq() (v *GetUserInformationRequest) {
	if !p.IsSetReq() {
		return UserServiceGetInformationArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *UserServiceGetInformationArgs) SetReq(val *GetUserInformationRequest) {
	p.Req = val
}

func (p *UserServiceGetInformationArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserServiceGetInformationArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceGetInformationArgs(%+v)", *p)
}

func (p *UserServiceGetInformationArgs) DeepEqual(ano *UserServiceGetInformationArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *UserServiceGetInformationArgs) Field1DeepEqual(src *GetUserInformationRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_UserServiceGetInformationArgs = map[int16]string{
	1: "req",
}

type UserServiceGetInformationResult struct {
	Success *GetUserInformationResponse `thrift:"success,0,optional" frugal:"0,optional,GetUserInformationResponse" json:"success,omitempty"`
}

func NewUserServiceGetInformationResult() *UserServiceGetInformationResult {
	return &UserServiceGetInformationResult{}
}

func (p *UserServiceGetInformationResult) InitDefault() {
}

var UserServiceGetInformationResult_Success_DEFAULT *GetUserInformationResponse

func (p *UserServiceGetInformationResult) GetSuccess() (v *GetUserInformationResponse) {
	if !p.IsSetSuccess() {
		return UserServiceGetInformationResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserServiceGetInformationResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetUserInformationResponse)
}

func (p *UserServiceGetInformationResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserServiceGetInformationResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceGetInformationResult(%+v)", *p)
}

func (p *UserServiceGetInformationResult) DeepEqual(ano *UserServiceGetInformationResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *UserServiceGetInformationResult) Field0DeepEqual(src *GetUserInformationResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_UserServiceGetInformationResult = map[int16]string{
	0: "success",
}

type UserServiceSearchImageArgs struct {
	Req *SearchImagesRequest `thrift:"req,1" frugal:"1,default,SearchImagesRequest" json:"req"`
}

func NewUserServiceSearchImageArgs() *UserServiceSearchImageArgs {
	return &UserServiceSearchImageArgs{}
}

func (p *UserServiceSearchImageArgs) InitDefault() {
}

var UserServiceSearchImageArgs_Req_DEFAULT *SearchImagesRequest

func (p *UserServiceSearchImageArgs) GetReq() (v *SearchImagesRequest) {
	if !p.IsSetReq() {
		return UserServiceSearchImageArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *UserServiceSearchImageArgs) SetReq(val *SearchImagesRequest) {
	p.Req = val
}

func (p *UserServiceSearchImageArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserServiceSearchImageArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceSearchImageArgs(%+v)", *p)
}

func (p *UserServiceSearchImageArgs) DeepEqual(ano *UserServiceSearchImageArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *UserServiceSearchImageArgs) Field1DeepEqual(src *SearchImagesRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_UserServiceSearchImageArgs = map[int16]string{
	1: "req",
}

type UserServiceSearchImageResult struct {
	Success *SearchImagesResponse `thrift:"success,0,optional" frugal:"0,optional,SearchImagesResponse" json:"success,omitempty"`
}

func NewUserServiceSearchImageResult() *UserServiceSearchImageResult {
	return &UserServiceSearchImageResult{}
}

func (p *UserServiceSearchImageResult) InitDefault() {
}

var UserServiceSearchImageResult_Success_DEFAULT *SearchImagesResponse

func (p *UserServiceSearchImageResult) GetSuccess() (v *SearchImagesResponse) {
	if !p.IsSetSuccess() {
		return UserServiceSearchImageResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserServiceSearchImageResult) SetSuccess(x interface{}) {
	p.Success = x.(*SearchImagesResponse)
}

func (p *UserServiceSearchImageResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserServiceSearchImageResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceSearchImageResult(%+v)", *p)
}

func (p *UserServiceSearchImageResult) DeepEqual(ano *UserServiceSearchImageResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *UserServiceSearchImageResult) Field0DeepEqual(src *SearchImagesResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_UserServiceSearchImageResult = map[int16]string{
	0: "success",
}

type UserServiceGetMFAArgs struct {
	Req *GetMFARequest `thrift:"req,1" frugal:"1,default,GetMFARequest" json:"req"`
}

func NewUserServiceGetMFAArgs() *UserServiceGetMFAArgs {
	return &UserServiceGetMFAArgs{}
}

func (p *UserServiceGetMFAArgs) InitDefault() {
}

var UserServiceGetMFAArgs_Req_DEFAULT *GetMFARequest

func (p *UserServiceGetMFAArgs) GetReq() (v *GetMFARequest) {
	if !p.IsSetReq() {
		return UserServiceGetMFAArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *UserServiceGetMFAArgs) SetReq(val *GetMFARequest) {
	p.Req = val
}

func (p *UserServiceGetMFAArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserServiceGetMFAArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceGetMFAArgs(%+v)", *p)
}

func (p *UserServiceGetMFAArgs) DeepEqual(ano *UserServiceGetMFAArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *UserServiceGetMFAArgs) Field1DeepEqual(src *GetMFARequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_UserServiceGetMFAArgs = map[int16]string{
	1: "req",
}

type UserServiceGetMFAResult struct {
	Success *GetMFAResponse `thrift:"success,0,optional" frugal:"0,optional,GetMFAResponse" json:"success,omitempty"`
}

func NewUserServiceGetMFAResult() *UserServiceGetMFAResult {
	return &UserServiceGetMFAResult{}
}

func (p *UserServiceGetMFAResult) InitDefault() {
}

var UserServiceGetMFAResult_Success_DEFAULT *GetMFAResponse

func (p *UserServiceGetMFAResult) GetSuccess() (v *GetMFAResponse) {
	if !p.IsSetSuccess() {
		return UserServiceGetMFAResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserServiceGetMFAResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetMFAResponse)
}

func (p *UserServiceGetMFAResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserServiceGetMFAResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceGetMFAResult(%+v)", *p)
}

func (p *UserServiceGetMFAResult) DeepEqual(ano *UserServiceGetMFAResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *UserServiceGetMFAResult) Field0DeepEqual(src *GetMFAResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_UserServiceGetMFAResult = map[int16]string{
	0: "success",
}

type UserServiceMindBindArgs struct {
	Req *MFABindRequest `thrift:"req,1" frugal:"1,default,MFABindRequest" json:"req"`
}

func NewUserServiceMindBindArgs() *UserServiceMindBindArgs {
	return &UserServiceMindBindArgs{}
}

func (p *UserServiceMindBindArgs) InitDefault() {
}

var UserServiceMindBindArgs_Req_DEFAULT *MFABindRequest

func (p *UserServiceMindBindArgs) GetReq() (v *MFABindRequest) {
	if !p.IsSetReq() {
		return UserServiceMindBindArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *UserServiceMindBindArgs) SetReq(val *MFABindRequest) {
	p.Req = val
}

func (p *UserServiceMindBindArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserServiceMindBindArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceMindBindArgs(%+v)", *p)
}

func (p *UserServiceMindBindArgs) DeepEqual(ano *UserServiceMindBindArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *UserServiceMindBindArgs) Field1DeepEqual(src *MFABindRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_UserServiceMindBindArgs = map[int16]string{
	1: "req",
}

type UserServiceMindBindResult struct {
	Success *MFABindResponse `thrift:"success,0,optional" frugal:"0,optional,MFABindResponse" json:"success,omitempty"`
}

func NewUserServiceMindBindResult() *UserServiceMindBindResult {
	return &UserServiceMindBindResult{}
}

func (p *UserServiceMindBindResult) InitDefault() {
}

var UserServiceMindBindResult_Success_DEFAULT *MFABindResponse

func (p *UserServiceMindBindResult) GetSuccess() (v *MFABindResponse) {
	if !p.IsSetSuccess() {
		return UserServiceMindBindResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserServiceMindBindResult) SetSuccess(x interface{}) {
	p.Success = x.(*MFABindResponse)
}

func (p *UserServiceMindBindResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserServiceMindBindResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceMindBindResult(%+v)", *p)
}

func (p *UserServiceMindBindResult) DeepEqual(ano *UserServiceMindBindResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *UserServiceMindBindResult) Field0DeepEqual(src *MFABindResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_UserServiceMindBindResult = map[int16]string{
	0: "success",
}

type UserServiceQueryUserIdByUsernameArgs struct {
	Req *QueryUserIdByUsernameRequest `thrift:"req,1" frugal:"1,default,QueryUserIdByUsernameRequest" json:"req"`
}

func NewUserServiceQueryUserIdByUsernameArgs() *UserServiceQueryUserIdByUsernameArgs {
	return &UserServiceQueryUserIdByUsernameArgs{}
}

func (p *UserServiceQueryUserIdByUsernameArgs) InitDefault() {
}

var UserServiceQueryUserIdByUsernameArgs_Req_DEFAULT *QueryUserIdByUsernameRequest

func (p *UserServiceQueryUserIdByUsernameArgs) GetReq() (v *QueryUserIdByUsernameRequest) {
	if !p.IsSetReq() {
		return UserServiceQueryUserIdByUsernameArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *UserServiceQueryUserIdByUsernameArgs) SetReq(val *QueryUserIdByUsernameRequest) {
	p.Req = val
}

func (p *UserServiceQueryUserIdByUsernameArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserServiceQueryUserIdByUsernameArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceQueryUserIdByUsernameArgs(%+v)", *p)
}

func (p *UserServiceQueryUserIdByUsernameArgs) DeepEqual(ano *UserServiceQueryUserIdByUsernameArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *UserServiceQueryUserIdByUsernameArgs) Field1DeepEqual(src *QueryUserIdByUsernameRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_UserServiceQueryUserIdByUsernameArgs = map[int16]string{
	1: "req",
}

type UserServiceQueryUserIdByUsernameResult struct {
	Success *QueryUserIdByUsernameResponse `thrift:"success,0,optional" frugal:"0,optional,QueryUserIdByUsernameResponse" json:"success,omitempty"`
}

func NewUserServiceQueryUserIdByUsernameResult() *UserServiceQueryUserIdByUsernameResult {
	return &UserServiceQueryUserIdByUsernameResult{}
}

func (p *UserServiceQueryUserIdByUsernameResult) InitDefault() {
}

var UserServiceQueryUserIdByUsernameResult_Success_DEFAULT *QueryUserIdByUsernameResponse

func (p *UserServiceQueryUserIdByUsernameResult) GetSuccess() (v *QueryUserIdByUsernameResponse) {
	if !p.IsSetSuccess() {
		return UserServiceQueryUserIdByUsernameResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserServiceQueryUserIdByUsernameResult) SetSuccess(x interface{}) {
	p.Success = x.(*QueryUserIdByUsernameResponse)
}

func (p *UserServiceQueryUserIdByUsernameResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserServiceQueryUserIdByUsernameResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceQueryUserIdByUsernameResult(%+v)", *p)
}

func (p *UserServiceQueryUserIdByUsernameResult) DeepEqual(ano *UserServiceQueryUserIdByUsernameResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *UserServiceQueryUserIdByUsernameResult) Field0DeepEqual(src *QueryUserIdByUsernameResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_UserServiceQueryUserIdByUsernameResult = map[int16]string{
	0: "success",
}
