// Code generated by hertz generator.

package main

import (
	"TikTok-rpc/app/gateway/middleware/jwt"
	"TikTok-rpc/app/gateway/router"
	websock "TikTok-rpc/app/gateway/router/api/websocket"
	"TikTok-rpc/app/gateway/rpc"
	"TikTok-rpc/config"
	"TikTok-rpc/pkg/base"
	"TikTok-rpc/pkg/constants"
	"TikTok-rpc/pkg/pprof"
	"TikTok-rpc/pkg/utils"
	"context"
	"github.com/bytedance/gopkg/util/logger"
	"github.com/cloudwego/hertz/pkg/app/server"
)

var serviceName = constants.GatewayServiceName

func init() {
	config.Init(serviceName)
	rpc.Init()
	jwt.Init()
}

func main() {
	pprof.Load(serviceName)
	listenAddr, err := utils.GetAvailablePort()
	if err != nil {
		logger.Fatalf("get available port failed, err: %v", err)
	}

	p := base.TelemetryProvider(serviceName, config.Otel.CollectorAddr)
	defer func() {
		err := p.Shutdown(context.Background())
		logger.Fatalf("shutdown telemetry provider failed, err: %v", err)
	}()

	h := server.New(
		server.WithHostPorts(listenAddr),
		server.WithHandleMethodNotAllowed(true),
	)

	router.GeneratedRegister(h)
	ws := server.Default(server.WithHostPorts("127.0.0.1:10000"))
	ws.NoHijackConnPool = true
	websock.WebsocketRegister(ws)
	go ws.Spin()
	h.Spin()
}
