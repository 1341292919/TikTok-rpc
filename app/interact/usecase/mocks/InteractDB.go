// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	model "TikTok-rpc/app/interact/domain/model"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// InteractDB is an autogenerated mock type for the InteractDB type
type InteractDB struct {
	mock.Mock
}

// CreateNewComment provides a mock function with given fields: ctx, req
func (_m *InteractDB) CreateNewComment(ctx context.Context, req *model.InteractReq) (int64, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateNewComment")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.InteractReq) (int64, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.InteractReq) int64); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.InteractReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateNewUserLike provides a mock function with given fields: ctx, targetid, uid, t
func (_m *InteractDB) CreateNewUserLike(ctx context.Context, targetid int64, uid int64, t int64) error {
	ret := _m.Called(ctx, targetid, uid, t)

	if len(ret) == 0 {
		panic("no return value specified for CreateNewUserLike")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, int64) error); ok {
		r0 = rf(ctx, targetid, uid, t)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteComment provides a mock function with given fields: ctx, req
func (_m *InteractDB) DeleteComment(ctx context.Context, req *model.InteractReq) (*model.Comment, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for DeleteComment")
	}

	var r0 *model.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.InteractReq) (*model.Comment, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.InteractReq) *model.Comment); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Comment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.InteractReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUserLike provides a mock function with given fields: ctx, targetid, uid, t
func (_m *InteractDB) DeleteUserLike(ctx context.Context, targetid int64, uid int64, t int64) error {
	ret := _m.Called(ctx, targetid, uid, t)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUserLike")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, int64) error); ok {
		r0 = rf(ctx, targetid, uid, t)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IsCommentExist provides a mock function with given fields: ctx, id
func (_m *InteractDB) IsCommentExist(ctx context.Context, id int64) (bool, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for IsCommentExist")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (bool, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) bool); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsCommentLikeExist provides a mock function with given fields: ctx, id, uid
func (_m *InteractDB) IsCommentLikeExist(ctx context.Context, id int64, uid int64) (bool, error) {
	ret := _m.Called(ctx, id, uid)

	if len(ret) == 0 {
		panic("no return value specified for IsCommentLikeExist")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) (bool, error)); ok {
		return rf(ctx, id, uid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) bool); ok {
		r0 = rf(ctx, id, uid)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int64) error); ok {
		r1 = rf(ctx, id, uid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsVideoLikeExist provides a mock function with given fields: ctx, id, uid
func (_m *InteractDB) IsVideoLikeExist(ctx context.Context, id int64, uid int64) (bool, error) {
	ret := _m.Called(ctx, id, uid)

	if len(ret) == 0 {
		panic("no return value specified for IsVideoLikeExist")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) (bool, error)); ok {
		return rf(ctx, id, uid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) bool); ok {
		r0 = rf(ctx, id, uid)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int64) error); ok {
		r1 = rf(ctx, id, uid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryAllUserLike provides a mock function with given fields: ctx
func (_m *InteractDB) QueryAllUserLike(ctx context.Context) ([]*model.UserLike, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for QueryAllUserLike")
	}

	var r0 []*model.UserLike
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*model.UserLike, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*model.UserLike); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.UserLike)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryCommentByParentId provides a mock function with given fields: ctx, req
func (_m *InteractDB) QueryCommentByParentId(ctx context.Context, req *model.InteractReq) ([]*model.Comment, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for QueryCommentByParentId")
	}

	var r0 []*model.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.InteractReq) ([]*model.Comment, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.InteractReq) []*model.Comment); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Comment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.InteractReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryCommentLikeCount provides a mock function with given fields: ctx
func (_m *InteractDB) QueryCommentLikeCount(ctx context.Context) ([]*model.LikeCount, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for QueryCommentLikeCount")
	}

	var r0 []*model.LikeCount
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*model.LikeCount, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*model.LikeCount); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.LikeCount)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryUserLikeByUid provides a mock function with given fields: ctx, uid
func (_m *InteractDB) QueryUserLikeByUid(ctx context.Context, uid int64) ([]*model.UserLike, error) {
	ret := _m.Called(ctx, uid)

	if len(ret) == 0 {
		panic("no return value specified for QueryUserLikeByUid")
	}

	var r0 []*model.UserLike
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]*model.UserLike, error)); ok {
		return rf(ctx, uid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []*model.UserLike); ok {
		r0 = rf(ctx, uid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.UserLike)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, uid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCommentCount provides a mock function with given fields: ctx, commentid, change
func (_m *InteractDB) UpdateCommentCount(ctx context.Context, commentid int64, change int64) error {
	ret := _m.Called(ctx, commentid, change)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCommentCount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) error); ok {
		r0 = rf(ctx, commentid, change)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateCommentLikeCount provides a mock function with given fields: ctx, cid, newcount
func (_m *InteractDB) UpdateCommentLikeCount(ctx context.Context, cid int64, newcount int64) error {
	ret := _m.Called(ctx, cid, newcount)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCommentLikeCount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) error); ok {
		r0 = rf(ctx, cid, newcount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewInteractDB creates a new instance of InteractDB. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewInteractDB(t interface {
	mock.TestingT
	Cleanup(func())
}) *InteractDB {
	mock := &InteractDB{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
