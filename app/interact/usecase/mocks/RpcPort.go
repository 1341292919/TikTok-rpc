// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	model "TikTok-rpc/app/interact/domain/model"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// RpcPort is an autogenerated mock type for the RpcPort type
type RpcPort struct {
	mock.Mock
}

// AddCount provides a mock function with given fields: ctx, videoID, t
func (_m *RpcPort) AddCount(ctx context.Context, videoID int64, t int64) error {
	ret := _m.Called(ctx, videoID, t)

	if len(ret) == 0 {
		panic("no return value specified for AddCount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) error); ok {
		r0 = rf(ctx, videoID, t)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IsUserExist provides a mock function with given fields: ctx, userId
func (_m *RpcPort) IsUserExist(ctx context.Context, userId int64) (bool, error) {
	ret := _m.Called(ctx, userId)

	if len(ret) == 0 {
		panic("no return value specified for IsUserExist")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (bool, error)); ok {
		return rf(ctx, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) bool); ok {
		r0 = rf(ctx, userId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsVideoExist provides a mock function with given fields: ctx, videoID
func (_m *RpcPort) IsVideoExist(ctx context.Context, videoID int64) (bool, error) {
	ret := _m.Called(ctx, videoID)

	if len(ret) == 0 {
		panic("no return value specified for IsVideoExist")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (bool, error)); ok {
		return rf(ctx, videoID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) bool); ok {
		r0 = rf(ctx, videoID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, videoID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryVideoLikeCount provides a mock function with given fields: ctx
func (_m *RpcPort) QueryVideoLikeCount(ctx context.Context) ([]*model.LikeCount, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for QueryVideoLikeCount")
	}

	var r0 []*model.LikeCount
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*model.LikeCount, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*model.LikeCount); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.LikeCount)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryVideoList provides a mock function with given fields: ctx, videoID
func (_m *RpcPort) QueryVideoList(ctx context.Context, videoID []int64) ([]*model.Video, error) {
	ret := _m.Called(ctx, videoID)

	if len(ret) == 0 {
		panic("no return value specified for QueryVideoList")
	}

	var r0 []*model.Video
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []int64) ([]*model.Video, error)); ok {
		return rf(ctx, videoID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []int64) []*model.Video); ok {
		r0 = rf(ctx, videoID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Video)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []int64) error); ok {
		r1 = rf(ctx, videoID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateVideoCommentCount provides a mock function with given fields: ctx, videoID, count
func (_m *RpcPort) UpdateVideoCommentCount(ctx context.Context, videoID int64, count int64) error {
	ret := _m.Called(ctx, videoID, count)

	if len(ret) == 0 {
		panic("no return value specified for UpdateVideoCommentCount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) error); ok {
		r0 = rf(ctx, videoID, count)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateVideoLikeCount provides a mock function with given fields: ctx, videoID, count
func (_m *RpcPort) UpdateVideoLikeCount(ctx context.Context, videoID int64, count int64) error {
	ret := _m.Called(ctx, videoID, count)

	if len(ret) == 0 {
		panic("no return value specified for UpdateVideoLikeCount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) error); ok {
		r0 = rf(ctx, videoID, count)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRpcPort creates a new instance of RpcPort. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRpcPort(t interface {
	mock.TestingT
	Cleanup(func())
}) *RpcPort {
	mock := &RpcPort{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
